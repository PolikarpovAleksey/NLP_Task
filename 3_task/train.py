# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q6xPnf9utkS8SdezrSeNqEuJZBLZ3KpW
"""

!pip install datasets

!pip install accelerate -U

from datasets import load_dataset
from transformers import (
    AutoTokenizer,
    AutoModelForSeq2SeqLM,
    DataCollatorForSeq2Seq,
    Seq2SeqTrainingArguments,
    Seq2SeqTrainer,
)

PREFIX = 'get a title: '
DATASET_NAME = 'AlekseyScorpi/vacancies_prompts'
MODEL_NAME = 'cointegrated/rut5-small'

def preprocess_dataset(items, tokenizer, prefix):
    inputs = [prefix + text for text in items["description"]]
    model_inputs = tokenizer(inputs, max_length=1024, truncation=True)

    labels = tokenizer(items["prompt"], max_length=128, truncation=True)
    model_inputs["labels"] = labels["input_ids"]

    return model_inputs

def get_test_train_dataset(dataset_name, tokenizer, prefix, train_size=2500, test_size=500, seed=666):
    dataset = load_dataset(dataset_name)
    shuffled_dataset = dataset['train'].shuffle(seed=seed)

    train_dataset = shuffled_dataset.select(range(train_size))
    test_dataset = shuffled_dataset.select(range(train_size, train_size + test_size))

    _preprocess_dataset = lambda items: preprocess_dataset(items, tokenizer, prefix)

    tokenized_train = train_dataset.map(_preprocess_dataset, batched=True)
    tokenized_test = test_dataset.map(_preprocess_dataset, batched=True)

    return tokenized_train, tokenized_test

def get_model(model_name):
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSeq2SeqLM.from_pretrained(model_name)

    return model, tokenizer

model, tokenizer = get_model(MODEL_NAME)

train_dataset, test_dataset = get_test_train_dataset(DATASET_NAME, tokenizer, PREFIX)

data_collator = DataCollatorForSeq2Seq(tokenizer=tokenizer, model=model)

training_args = Seq2SeqTrainingArguments(
    output_dir="./result_models",
    eval_steps=100,
    logging_steps=100,
    learning_rate=2e-5,
    per_device_train_batch_size=4,
    per_device_eval_batch_size=4,
    weight_decay=0.01,
    save_total_limit=3,
    num_train_epochs=3,
    save_strategy="steps",
    save_steps=100,
    evaluation_strategy="steps",  # Setting evaluation strategy to match save strategy
    load_best_model_at_end=True,
    predict_with_generate=True,
)

trainer = Seq2SeqTrainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
    tokenizer=tokenizer,
    data_collator=data_collator,
)

print('Start training...')

trainer.train()

print('The training is over! The model has been saved.')